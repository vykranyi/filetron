const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

async function exportAndClearQueue(db) {
  return new Promise((resolve, reject) => {
    db.all(`SELECT * FROM queue ORDER BY id ASC`, async (err, rows) => {
      if (err) return reject(err);
      if (!rows.length) return resolve('üì≠ –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, –Ω—ñ—á–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏.');

      const dateStr = new Date().toISOString().slice(0, 10); // YYYY-MM-DD
      const filePath = path.join(__dirname, '../data/queue-backup.xlsx');

      const workbook = new ExcelJS.Workbook();

      // –Ø–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
      if (fs.existsSync(filePath)) {
        await workbook.xlsx.readFile(filePath);
      }

      // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∞—Ä–∫—É—à —ñ–∑ –¥–∞—Ç–æ—é
      const sheet = workbook.addWorksheet(dateStr);

      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      sheet.columns = [
        { header: 'ID', key: 'id', width: 10 },
        { header: 'User ID', key: 'userId', width: 25 },
        { header: '–Ü–º º—è', key: 'name', width: 20 },
        { header: '–§–æ—Ä–º–∞—Ç', key: 'format', width: 10 },
        { header: '–°—Ç–æ—Ä—ñ–Ω–∫–∏', key: 'pages', width: 10 },
        { header: '–î–æ—Å—Ç–∞–≤–∫–∞', key: 'delivery', width: 15 },
        { header: '–°—Ç–≤–æ—Ä–µ–Ω–æ', key: 'createdAt', width: 20 },
      ];

      // –î–∞–Ω—ñ
      rows.forEach(row => {
        sheet.addRow(row);
      });

      // –ó–±–µ—Ä–µ–≥—Ç–∏
      await workbook.xlsx.writeFile(filePath);

      // –û—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É
      db.run(`DELETE FROM queue`, [], (deleteErr) => {
        if (deleteErr) return reject(deleteErr);
        resolve(`‚úÖ –õ–∏—Å—Ç "${dateStr}" –¥–æ–¥–∞–Ω–æ –≤ queue-backup.xlsx, —á–µ—Ä–≥–∞ –æ—á–∏—â–µ–Ω–∞.`);
      });
    });
  });
}

module.exports = { exportAndClearQueue };
