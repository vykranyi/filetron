require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./data/queuebot.db');
const { getUserState, setUserState, clearUserState } = require('./controllers/userController');
const { addToQueue, getStatus, cancelFromQueue } = require('./controllers/queueController');
const { generateTicketSVG } = require('./utils/ticketGenerator');
const { sendMessage, sendImage, sendQuickReplies } = require('./services/messengerService');

const app = express();
app.use(bodyParser.json());

const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const PAGE_ID = process.env.PAGE_ID;
const ADMIN_IDS = process.env.ADMINS.split(',').map(id => id.trim());

// üîê –í–µ–±—Ö—É–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode && token === VERIFY_TOKEN) {
    console.log('‚úÖ Webhook verified!');
    res.status(200).send(challenge);
  } else {
    res.sendStatus(403);
  }
});

// üì© –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
app.post('/webhook', (req, res) => {
  const body = req.body;

  if (body.object === 'page') {
    body.entry.forEach(entry => {
      const events = entry.messaging || [];

      events.forEach(event => {
        const senderId = event.sender?.id;
        const message = event.message;
        const text = message?.text;
        const payload = message?.quick_reply?.payload;
        const command = payload || text;

        if (message?.is_echo || senderId === PAGE_ID || !command) return;

        const isAdmin = ADMIN_IDS.includes(senderId);
        console.log(`üì© New message: ${senderId}: ${command}`);

        // ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /—Å—Ç–∞—Ä—Ç
        if (command === '/—Å—Ç–∞—Ä—Ç' || command === '/') {
          return sendQuickReplies(senderId, 'üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —á–µ—Ä–≥–∏ –Ω–∞ –¥—Ä—É–∫. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', [
            { title: 'üì• –î–æ–ª—É—á–∏—Ç–∏—Å—è', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' },
            { title: 'üìä –ú—ñ–π —Å—Ç–∞—Ç—É—Å', payload: '/—Å—Ç–∞—Ç—É—Å' },
            { title: 'üö´ –í–∏–π—Ç–∏ –∑ —á–µ—Ä–≥–∏', payload: '/–≤—ñ–¥–º—ñ–Ω–∞' }
          ]);
        }

        // üë®‚Äçüíº –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏
        if (isAdmin && command === '/—á–µ—Ä–≥–∞') {
          db.all(`SELECT id, name FROM queue ORDER BY id ASC LIMIT 10`, [], (err, rows) => {
            if (err || !rows.length) {
              return sendMessage(senderId, 'üì≠ –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è');
            }

            const list = rows.map(row => `#${String(row.id).padStart(3, '0')} ‚Äî ${row.name}`).join('\n');
            sendMessage(senderId, `üìã –ü–æ—Ç–æ—á–Ω–∞ —á–µ—Ä–≥–∞:\n${list}`);
            return sendQuickReplies(senderId, 'üîß –î—ñ—ó:', [
              { title: '‚úÖ –ù–∞—Å—Ç—É–ø–Ω–∏–π', payload: '/–Ω–∞—Å—Ç—É–ø–Ω–∏–π' },
              { title: 'üìã –ß–µ—Ä–≥–∞', payload: '/—á–µ—Ä–≥–∞' }
            ]);
          });
          return;
        }

        if (isAdmin && command === '/–Ω–∞—Å—Ç—É–ø–Ω–∏–π') {
          db.get(`SELECT * FROM queue ORDER BY id ASC LIMIT 1`, [], (err, nextUser) => {
            if (err || !nextUser) {
              return sendMessage(senderId, 'üì≠ –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è');
            }

            db.run(`DELETE FROM queue WHERE id = ?`, [nextUser.id]);

            db.get(`SELECT * FROM queue ORDER BY id ASC LIMIT 1 OFFSET 4`, [], (err, warnUser) => {
              if (warnUser) {
                sendMessage(warnUser.userId, '‚è≥ –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ 5 –ª—é–¥–µ–π, –≥–æ—Ç—É–π—Ç–µ—Å—è!');
              }
            });

            return sendQuickReplies(senderId, '‚åõ –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ç—Ä–∏–≤–∞—Ç–∏–º–µ —Ü—è –ø–æ—Å–ª—É–≥–∞?', [
              { title: '5 —Ö–≤', payload: `/—Ç–∞–π–º–µ—Ä_5_${nextUser.userId}` },
              { title: '10 —Ö–≤', payload: `/—Ç–∞–π–º–µ—Ä_10_${nextUser.userId}` },
              { title: '15 —Ö–≤', payload: `/—Ç–∞–π–º–µ—Ä_15_${nextUser.userId}` },
              { title: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', payload: '/—á–µ—Ä–≥–∞' }
            ]);
          });
          return;
        }

        if (isAdmin && command.startsWith('/—Ç–∞–π–º–µ—Ä_')) {
          const [_, mins, targetUserId] = command.split('_');
          sendMessage(targetUserId, `üì£ –í–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ! –ü—ñ–¥—Ö–æ–¥—å—Ç–µ –¥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ üñ®Ô∏è`);
          sendMessage(senderId, `‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å: ${mins} —Ö–≤.`);
          return;
        }

        // üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        getUserState(senderId, (userState) => {
          if (command === '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è') {
            db.get(`SELECT COUNT(*) as count FROM queue WHERE userId = ?`, [senderId], (err, row) => {
              if (row.count >= 3) {
                return sendMessage(senderId, '‚ö†Ô∏è –í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –æ–¥–∏–Ω –∑ –Ω–∏—Ö.');
              }
              setUserState(senderId, { step: 'name' });
              return sendQuickReplies(senderId, 'üìõ –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è:', [
                { title: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', payload: '/' }
              ]);
            });
            return;
          }

          if (command === '/—Å—Ç–∞—Ç—É—Å') {
            db.all(`SELECT id, name FROM queue WHERE userId = ? ORDER BY id ASC`, [senderId], (err, rows) => {
              if (err || !rows.length) {
                return sendQuickReplies(senderId, '‚ÑπÔ∏è –í–∏ –∑–∞—Ä–∞–∑ –Ω–µ –≤ —á–µ—Ä–∑—ñ.', [
                  { title: 'üì• –î–æ–ª—É—á–∏—Ç–∏—Å—è', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' },
                  { title: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', payload: '/' }
                ]);
              }
              const list = rows.map((row) => `#${String(row.id).padStart(3, '0')} ‚Äî ${row.name}`).join('\n');
              const buttons = rows.map((row) => ({
                title: `‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ #${row.id}`,
                payload: `/–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏_–≤—ñ–¥–º—ñ–Ω—É_${row.id}`
              }));
              buttons.push({ title: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', payload: '/' });
              return sendQuickReplies(senderId, `üìç –í–∞—à—ñ —á–µ—Ä–≥–∏:\n${list}`, buttons);
            });
            return;
          }

          if (command.startsWith('/–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏_–≤—ñ–¥–º—ñ–Ω—É_')) {
            const cancelId = parseInt(command.split('_')[2]);
            return sendQuickReplies(senderId, `‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å #${cancelId}?`, [
              { title: '‚úÖ –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏', payload: `/–≤—ñ–¥–º—ñ–Ω–∞_${cancelId}` },
              { title: '‚Ü©Ô∏è –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏', payload: '/—Å—Ç–∞—Ç—É—Å' }
            ]);
          }

          if (command.startsWith('/–≤—ñ–¥–º—ñ–Ω–∞_')) {
            const cancelId = parseInt(command.split('_')[1]);
            db.run(`DELETE FROM queue WHERE id = ? AND userId = ?`, [cancelId, senderId], function (err) {
              if (err || this.changes === 0) {
                return sendMessage(senderId, `‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å #${cancelId}.`);
              }
              return sendMessage(senderId, `‚ùå –ó–∞–ø–∏—Å #${cancelId} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.`);
            });
            return;
          }

          if (command === '/–≤—ñ–¥–º—ñ–Ω–∞') {
            cancelFromQueue(senderId, (success) => {
              if (success) {
                clearUserState(senderId);
                return sendQuickReplies(senderId, '‚ùå –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —á–µ—Ä–≥–∏.', [
                  { title: 'üì• –î–æ–ª—É—á–∏—Ç–∏—Å—è –∑–Ω–æ–≤—É', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' }
                ]);
              } else {
                return sendMessage(senderId, '‚ÑπÔ∏è –í–∞—Å –Ω–µ –±—É–ª–æ –≤ —á–µ—Ä–∑—ñ.');
              }
            });
            return;
          }

          if (userState?.step === 'name') {
            setUserState(senderId, { step: 'format', name: command });
            return sendQuickReplies(senderId, 'üìÑ –í–∫–∞–∂—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–∫—É (A3, A4, –ø–ª–∞–∫–∞—Ç):', [
              { title: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' }
            ]);
          }

          if (userState?.step === 'format') {
            setUserState(senderId, { ...userState, step: 'pages', format: command });
            return sendQuickReplies(senderId, 'üìÉ –°–∫—ñ–ª—å–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏?', [
              { title: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' }
            ]);
          }

          if (userState?.step === 'pages') {
            setUserState(senderId, { ...userState, step: 'delivery_method', pages: command });
            return sendQuickReplies(senderId, 'üì© –Ø–∫ –≤–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥—Ä—É–∫—É?', [
              { title: 'üìé –ù–∞ —Ñ–ª–µ—à—Ü—ñ', payload: '/–¥–æ—Å—Ç–∞–≤–∫–∞_usb' },
              { title: 'üìß –ù–∞–¥—ñ—à–ª—é –Ω–∞ email', payload: '/–¥–æ—Å—Ç–∞–≤–∫–∞_email' },
              { title: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' }
            ]);
          }

          if (userState?.step === 'delivery_method') {
            if (command === '/–¥–æ—Å—Ç–∞–≤–∫–∞_usb') {
              const fullUser = { ...userState, step: 'done', delivery: 'USB' };
              clearUserState(senderId);

              addToQueue(senderId, fullUser, async (queueInfo) => {
                if (!queueInfo) {
                  return sendMessage(senderId, 'üò¢ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —á–µ—Ä–≥–∏.');
                }

                const { pngPath } = await generateTicketSVG(fullUser, queueInfo);

                await sendMessage(senderId,
                  `‚úÖ –í–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —á–µ—Ä–≥–∏!\nüÜî –í–∞—à ID: ${queueInfo.id}\nüìç –ü–æ–∑–∏—Ü—ñ—è: ${queueInfo.position}\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è: ~${queueInfo.eta} —Ö–≤`
                );

                await sendImage(senderId, pngPath);
                return sendQuickReplies(senderId, '–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?', [
                  { title: 'üì• –î–æ–ª—É—á–∏—Ç–∏—Å—è', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' },
                  { title: 'üìä –ú—ñ–π —Å—Ç–∞—Ç—É—Å', payload: '/—Å—Ç–∞—Ç—É—Å' },
                  { title: 'üö´ –í–∏–π—Ç–∏ –∑ —á–µ—Ä–≥–∏', payload: '/–≤—ñ–¥–º—ñ–Ω–∞' }
                ]);
              });
              return;
            }

            if (command === '/–¥–æ—Å—Ç–∞–≤–∫–∞_email') {
              const fullUser = { ...userState, step: 'done', delivery: 'Email' };
              clearUserState(senderId);

              addToQueue(senderId, fullUser, async (queueInfo) => {
                if (!queueInfo) {
                  return sendMessage(senderId, 'üò¢ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —á–µ—Ä–≥–∏.');
                }

                const { pngPath } = await generateTicketSVG(fullUser, queueInfo);

                await sendMessage(senderId,
                  `‚úÖ –í–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —á–µ—Ä–≥–∏!\nüÜî –í–∞—à ID: ${queueInfo.id}\nüìç –ü–æ–∑–∏—Ü—ñ—è: ${queueInfo.position}\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è: ~${queueInfo.eta} —Ö–≤`
                );

                await sendMessage(senderId, 'üìß –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à —Ñ–∞–π–ª –Ω–∞ email@email.com. –£ —Ç–µ–º—ñ –ª–∏—Å—Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —Ç–∞ ID.');
                await sendImage(senderId, pngPath);
                return sendQuickReplies(senderId, '–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?', [
                  { title: 'üì• –î–æ–ª—É—á–∏—Ç–∏—Å—è', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' },
                  { title: 'üìä –ú—ñ–π —Å—Ç–∞—Ç—É—Å', payload: '/—Å—Ç–∞—Ç—É—Å' },
                  { title: 'üö´ –í–∏–π—Ç–∏ –∑ —á–µ—Ä–≥–∏', payload: '/–≤—ñ–¥–º—ñ–Ω–∞' }
                ]);
              });
              return;
            }
          }

          return sendQuickReplies(senderId, '–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?', [
            { title: 'üì• –î–æ–ª—É—á–∏—Ç–∏—Å—è', payload: '/–¥–æ–ª—É—á–∏—Ç–∏—Å—è' },
            { title: 'üìä –ú—ñ–π —Å—Ç–∞—Ç—É—Å', payload: '/—Å—Ç–∞—Ç—É—Å' },
            { title: 'üö´ –í–∏–π—Ç–∏ –∑ —á–µ—Ä–≥–∏', payload: '/–≤—ñ–¥–º—ñ–Ω–∞' }
          ]);
        });
      });
    });

    res.status(200).send('EVENT_RECEIVED');
  } else {
    res.sendStatus(404);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
});